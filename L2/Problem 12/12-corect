; 11. Return the level (and coresponded list of nodes) with maximum number of nodes for a tree of type (2).
;      The level of the root element is 0.

; (car l) - the first element of the list is the root of the tree
; (cadr l) - the second element of the list, at superficial level, is the left subtree
; (caddr l) - the third element of the list, at the superficial level, is the right subtree


; myAppend(l1l2...ln, p1p2...pm) =
; = p1p2...pm, if n = 0
; = {l1} U myAppend(l2...ln, p1p2...pm), otherwise

(defun myAppend (l p)
  (cond
    ((null l) p)
    (t (cons (car l) (myAppend (cdr l) p)))
  )
)

; myLenght(l1l2...ln) = 
; = 0, if n = 0
; = 1 + myLenght(l2...ln), otherwise

(defun myLength (l)
  (cond
    ((null l) 0)
    (t (+ 1 (myLength (cdr l))))
  )
)


; getNodesFromLevel(l1l2l3, level) = 
; = [], if l1l2l3 is empty
; = list(l1), if level = 0
; = myAppend(getNodesFromLevel(l2, level - 1), getNodesFromLevel(l3, level - 1)), otherwise

(defun getNodesFromLevel(l lvl) 
  (cond
    ((null l) nil)
    ((equal lvl 0) (list (car l)))
    (t (myAppend (getNodesFromLevel (cadr l) (- lvl 1)) (getNodesFromLevel (caddr l) (- lvl 1))))
  )
)

; getMaxNodes(tree, max, auxMax, level) = 
; = max, if tree is empty
; = getMaxNodes(tree, auxMax, getNodesFromLevel(tree, level + 1), level + 1) , if myLength(auxMax) > myLength(max)
; = getMaxNodes(tree, max, getNodesFromLevel(tree, level + 1), level + 1), otherwise

(defun getMaxNodes(tree max auxMax level)
  (cond
    ((null auxMax) max)
    ((> (myLength auxMax) (myLength max)) (getMaxNodes tree auxMax (getNodesFromLevel tree (+ 1 level)) (+ 1 level)))
    (t (getMaxNodes tree max (getNodesFromLevel tree (+ 1 level)) (+ 1 level)))
  )
)

(defun main(tree)
  (getMaxNodes tree '() (getNodesFromLevel tree 0) 1)
)

