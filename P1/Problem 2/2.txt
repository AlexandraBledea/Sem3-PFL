% a. Write a predicate to remove all occurrences of a certain atom from a list.

% Model matematic:

% removeOcc(l1l2...ln, elem) = 
% [], if n = 0
% removeOcc(l2...ln, elem), if l1 = elem
% {l1} U removeOcc(l2...ln, elem), otherwise

% removeOcc(L: list, E: number, R: list)
% removeOcc(i,i,o)

removeOcc([],_,[]).
removeOcc([H|T],E,R):-
    H=:=E,
    removeOcc(T,E,R).
removeOcc([H|T], E, [H|R]):-
    removeOcc(T,E,R).

% b. Define a predicate to produce a list of pairs (atom n) from an initial list of atoms.
%  In this initial list atom has n occurrences.
%  Eg.: numberatom([1, 2, 1, 2, 1, 3, 1], X) => X = [[1, 4], [2, 2], [3, 1]]

%myCount(l1l2...ln, elem) = 
% 0, if n = 0
% 1 + myCount(l2...ln, elem), if l1 = elem
% myCount(l2...ln, elem), otherwise

% myCount(L:list, E:Number, R:list)

% WITH accumulator variable
myCountV2([], _, C, C).
myCountV2([H|T], E, C, R):-
    H=:=E,
    C1 is C + 1,
    myCountV2(T, E, C1, R).
myCountV2([H|T], E, C, R):-
    H=\=E,
    myCountV2(T, E, C, R).


% WITHOUT accumulator variable
myCount([], _, 0).
myCount([H|T], E, R1):-
    H=:=E,
	myCount(T, E, R),
    R1 is R + 1.
myCount([H|T], E, R):-
    H=\=E,
    myCount(T, E, R).

% numberAtom(l1l2...ln) = 
% = [], if n = 0
% = [l1, myCount(l1l2...ln, l1)] U numberAtom(removeOcc(l2...ln, l1)), otherwise

%numberAtom(L:list, R:list)
%numberAtom(i,o)

numberAtom([],[]).
numberAtom([H|T], [[H, RC] | R]):-
    myCount([H|T], H, RC),
    removeOcc(T, H, RR),
    numberAtom(RR, R).
