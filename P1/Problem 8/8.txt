%a) Write a predicate to determine if a list has even numbers of elements without
%  counting the elements from the list.

% verifyEven(l1l2...ln) = 
% = true, if n = 0
% = false, if n = 1
% = verifyEven(l3...ln), otherwise

% verifyEven(L:list)
% (i)

verifyEven([]).
verifyEven([_,_|T]):-verifyEven(T).

% b. Write a predicate to delete first occurrence of the minimum number from a list.

% min(a,b) = 
% a , if a < b
% b, otherwise

min(A,B,A):-
    A < B.
min(A,B,B):-
    A >= B.

% minList(l1l2...ln) = 
% l1, if n = 1
% min(l1, minList(l2...ln)), otherwise

% minList(L:list,R:list)
% (i,o)

minList([H],H).
minList([H|T],R1):-
    minList(T,R),
    min(H,R,R1).

% removeFirstOcc(l1l2...ln, elem) = 
% = [], if n = 0
% = l2...ln, if l1 = elem
% = removeFirstOcc(l2...ln, elem), otherwise

% removeFirstOcc(L:list, E:number, R:list)
% (i,i,o)

removeFirstOcc([],_,[]).
removeFirstOcc([H|T],E,T):-
    H=:=E,!.
removeFirstOcc([H|T],E,[H|R]):-
    removeFirstOcc(T,E,R).

% wrapper function
main(L,R):-
   	minList(L,M),
    removeFirstOcc(L,M,R).