;a) Write a function to test whether a list is linear.

; checkLinear(l1l2...ln) = 
; = true, if n = 0
; = false, if l1 is a list
; = checkLinear(l2...ln), otherwise


(defun checkLinear(l)
  (cond
    ((null l) t)
    ((listp (car l)) nil)
    (t (checkLinear (cdr l)))
  )
)

;b) Write a function to replace the first occurence of an element E in a given list with an other element O.

; replaceFirstOcc(l1l2...ln, elem, newElem) = 
; = nil , if n = 0
; = {newElem} U (l2...ln), if elem = l1
; = {l1} U replaceFirstOcc(l2...ln), otherwise

(defun replaceFirstOcc(l elem newElem)
  (cond
    ((null l) nil)
    ((equal elem (car l)) (cons newElem (cdr l)))
    (t (cons (car l) (replaceFirstOcc (cdr l) elem newElem)))
  )
)

;--- the function from above works only for a linear list


; searchElement(l1l2...ln, elem) = 
; = nil (false) , if n = 0
; = true , if l1 = elem
; = searchElement(l2...ln), otherwise

(defun searchElement(l elem)
  (cond
    ((null l) nil)
    ((equal (car l) elem) t)
    (t (searchElement (cdr l) elem))
  )
)


; firstOccReplace(l1l2...ln, elem, newElem) = 
; = nil , if n = 0
; = {newElem} U (l2...ln) , if elem = l1
; = firstOccReplace(l1, elem, newElem) U (l2...ln), if l1 is a list and searchElement(l1, elem) = true
; = {l1} U firstOccReplace(l2...ln, elem, newElem), otherwise


(defun firstOccReplace(l elem newElem)
  (cond
    ((null l) nil)
    ((equal (car l) elem) (cons newElem (cdr l)))
    ((and (listp (car l)) (searchElement (car l) elem)) (cons (firstOccReplace (car l) elem newElem) (cdr l)))
    (t (cons (car l) (firstOccReplace (cdr l) elem newElem)))
  )
)

;--- the funtion above works for a non linear list


; c) Write a function to replace each sublist of a list with its last element.
;    A sublist is an element from the first level, which is a list.
;    Example: (a (b c) (d (e (f)))) ==> (a c (e (f))) ==> (a c (f)) ==> (a c f)
;    (a (b c) (d ((e) f))) ==> (a c ((e) f)) ==> (a c f)


; myAppend(l1l2...ln, p1p2...pm) = 
; = p1p2...pm, if n = 0
; = {l1} U myAppend(l2...ln, p1p2...pm), otherwise

(defun myAppend(l p)
  (cond
    ((null l) p)
    (t (cons (car l) (myAppend (cdr l) p)))
  )
)

; myReverse(l1l2...ln) = 
; = nil , if n = 0
; = myAppend(myReverse(l2...ln), list(myReverse(l1))) , if l1 is a list
; = myAppend(myReverse(l2...ln), list(l1)) , otherwise

(defun myReverse (l)
  (cond
    ((null l) nil)
    ((listp (car l)) (myAppend (myReverse (cdr l)) (list (myReverse (car l)))))
    (t (myAppend (myReverse (cdr l)) (list (car l))))
  )
)

;-- the function above for reverse works for non-linear lists as well


; my_reverse(l1l2...ln) = 
; = nil , if n = 0
; = myAppend(my_reverse(l2...ln) , list(l1)) , otherwise


(defun my_reverse(l)
  (cond
    ((null l) nil)
    (t (myAppend (my_reverse (cdr l)) (list (car l))))
  )
)

(defun last_element (l)
	(if (listp l) 
        (last_element (car (my_reverse l)))
        l
    )
)

; myReduce(l1l2...ln) = 
; = nil , if n = 0
; = last_element(l1) U myReduce(l2...ln), if l1 is a list
; = {l1} U myReduce(l2...ln) , otherwise


(defun myReduce (l)
  (cond
    ((null l) nil)
    ((listp l) (cons (last_element (car l)) (myReduce (cdr l))))
    (t (cons (car l) (myReduce (cdr l))))
  )
)


; d) Write a function to merge two sorted lists without keeping double values.

; myMerge(l1l2...ln, p1p2...pm) = 
; = p1p2...pm, if n = 0
; = {l1} U myMerge(l2...ln, p1p2...pm) , if l1 < p1
; = {p1} U myMerge(l1l2...ln, p2...pm) , if l1 > p1
; = {l1} U myMerge(l2...ln, p2...pm) , if l1 = p1


(defun myMerge (l p)
  (cond
    ((null l) p)
    ((null p) l)
    ((< (car l) (car p)) (cons (car l) (myMerge (cdr l) p)))
    ((> (car l) (car p)) (cons (car p) (myMerge l (cdr p))))
    ((= (car l) (car p)) (cons (car l) (myMerge (cdr l) (cdr p))))
  )
)

