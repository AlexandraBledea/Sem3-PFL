;a) Write a function to return the dot product of two vectors. https://en.wikipedia.org/wiki/Dot_product 

; dotProduct(l1l2...ln, k1k2...km) = 
; = 0 , if n = 0
; = l1*l2 + dotProduct(l2...ln, k2...km) , otherwise

(defun dotProduct(l k)
  (cond
    ((null l) 0)
    (t (+ (* (car l) (car k)) (dotProduct (cdr l) (cdr k))))
  )
)


;b) Write a function to return the maximum value of all the numerical atoms of a list, at any level.

; lookForNumbers(l1l2...ln, c) = 
; = 0 , if n = 0 and c = 0
; = 1 , if n = 0 and c > 0
; = lookForNumbers(l2...ln, c + 1) , if l1 is a number
; = lookForNumbers(l1, c) + lookForNumbers(l2...ln, c), if l1 is a list
; = lookForNumbers(l2...ln, c) , otherwise


(defun lookForNumbers(l c)
  (cond
    ((and (null l)(= c 0)) 0)
    ((and (null l)(> c 0)) 1)
    ((numberp (car l) ) (lookForNumbers (cdr l) (+ 1 c)))
    ((listp (car l)) (+ (lookForNumbers (car l) c) (lookForNumbers (cdr l) c)))
    (t (lookForNumbers (cdr l) c))
  )
)


; myMax(a, b) = 
; = () , if a is not a number and b is not a number
; = b , if a is not a number
; = a , if b is not a number
; = a , if a > b
; = b , otherwise

(defun myMax(a b)
  (cond
    ((and (not (numberp a)) (not (numberp b))) nil)
    ((not (numberp a)) b)
    ((not (numberp b)) a)
    ((> a b) a)
    (t b)
  )
)  

; maxList(l1l2...ln) = 
; = l1 , if n = 1 and l1 is an atom
; = myMax(maxList(l1), maxList(l2...ln)) , if l1 is a list
; = myMax(l1, maxList(l2...ln) , otherwise

(defun maxList(l)
  (cond
    ((and (null (cdr l)) (atom (car l))) (car l))
    ((listp (car l)) (myMax (maxList (car l)) (maxList(cdr l))))
    (t (myMax (car l) (maxList (cdr l))))
  )
)


; main(l1l2...ln) = 
; 0 , if lookForNumbers = 0
; maxList(l1l2...ln) , otherwise

(defun main(l)
  (cond
    ((= (lookForNumbers l 0) 0) 0)
    (t (maxList l))
  )
) 


; c) All permutations to be replaced by: Write a function to compute the result of an arithmetic expression 
; memorised in preorder on a stack. Examples: 
;        (+ 1 3) ==> 4  (1 + 3) 
;        (+ * 2 4 3) ==> 11  [((2 * 4) + 3) 
;        (+ * 2 4 - 5 * 2 2) ==> 9  ((2 * 4) + (5 - (2 * 2)) 


; myAppend(l1l2...ln, k1k2...km) = 
; = k1k2...km, if n = 0
; = l1 U myAppend(l2...ln, k1k2...km), otherwise

(defun myAppend (L1 L2)
  (cond
    ((null L1) L2)
    (T (cons (car L1) (myAppend (cdr L1) L2)))
  )
)


; myReverse(l1l2...ln) = 
; = (), if n = 0
; = myAppend( myReverse(l2...ln), list (myReverse(l1)))  , if l1 is a list
; = myAppend( myReverse(l2...ln), list(l1)), otherwise

(defun myReverse (l)
    (cond
        ((null l) nil)
        ((listp (car l)) (myAppend (myReverse (cdr l)) (list (myReverse (car l)))))
        (T (myAppend (myReverse (cdr l)) (list (car l))))
    )
)


; evaluate(l1l2...ln, s1s2...sm) = 
; s1 , if n = 0
; evaluate(l2...ln, {l1} U s1s2...sm)  , if l1 is a number
; evaluate(l2...ln, {s1 * s2} U s3...sm) , if l1 = "*"
; evaluate(l2...ln, {s1 + s2} U s3...sm) , if l1 = "+"
; evaluate(l2...ln, {s1 / s2} U s3...sm) , if l1 = "/"
; evaluate(l2...ln, {s1 - s2} U s3...sm) , if l1 = "-"



(defun evaluate(l s)
  (cond
    ((null l) (car s))
    ((numberp (car l)) (evaluate (cdr l) (cons (car l) s)))
    ((string= "*" (car l)) (evaluate (cdr l) (cons (* (car s) (cadr s)) (cddr s))))
    ((string= "+" (car l)) (evaluate (cdr l) (cons (+ (car s) (cadr s)) (cddr s))))
    ((string= "/" (car l)) (evaluate (cdr l) (cons (floor (car s) (cadr s)) (cddr s))))
    (t (evaluate (cdr l) (cons (- (car s) (cadr s)) (cddr s))))
  )
)


; mainC(l1l2...ln) = 
; = evaluate(myReverse(l1l2...ln) ()) 

(defun mainC(l)
  (cond
    (t (evaluate (myReverse l) ()))
  )
)

; d)Write a function to return T if a list has an even number of elements on the first level, and NIL on the 
;   contrary case, without counting the elements of the list. 

; evenLength(l1l2...ln) =
; = true , if n = 0 
; = false , if n = 1
; = evenLength(l3...ln) , otherwise


(defun evenLength(l)
  (cond
    ((null l) T)
    ((null (cdr l)) nil)
    (t (evenLength (cddr l)))
  )
)