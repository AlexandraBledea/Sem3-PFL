;a) Write a function to return the product of all the numerical atoms from a list, at superficial level.

; myProduct(l1l2...ln) = 
; = 1, if n = 0
; = l1 * myProduct(l2...ln) , if l1 is a number
; = myProduct(l2...ln) , otherwise


(defun myProduct (l)
  (cond
    ((null l) 1)
    ((numberp (car l)) (* (car l) (myProduct (cdr l))))
    (t (myProduct (cdr l)))
  )
)

;b) Write a function to replace the first occurence of an element E in a given list with an other element O.

; myAppend(l1l2...ln, p1p2...pm) = 
; = p1p2...pm, if n = 0
; = l1 U myAppend(l2...ln, p1p2...pm) , otherwise

(defun myAppend (l p)
  (cond
    ((null l) p)
    (t (cons (car l) (myAppend (cdr l) p)))
  )
)

; checkExistence(l1l2...ln, elem) = 
; = false , if n = 0
; = true , if l1 = elem
; = checkExistence(l2...ln, elem)

(defun checkExistence(l elem)
  (cond
    ((null l) nil)
    ((equal (car l) elem) t)
    (t (checkExistence (cdr l) elem))
  )
)

; replaceFirstOcc(l1l2...ln, elem, newElem) = 
; = nil , if n = 0
; = myAppend(list(replaceFirstOcc(l1, elem, newElem)), l2...ln), if l1 is a list and checkExistence(l1, elem) = true
; = newElem U l2...ln , if l1 = elem
; = replaceFirstOcc(l2...ln, elem, newElem) , otherwise


(defun replaceFirstOcc(l elem newElem)
  (cond
    ((null l) nil)
    ((and (listp (car l)) (checkExistence (car l) elem)) (myAppend (list(replaceFirstOcc (car l) elem newElem)) (cdr l)))
    ((equal (car l) elem) (cons newElem (cdr l)))
    (t (replaceFirstOcc (cdr l) elem newElem))
  )
)


; d) Write a function to produce the list of pairs (atom n), where atom appears for n times in the parameter
;    list. Example:
;    (A B A B A C A) --> ((A 4) (B 2) (C 1)).


; count(l1l2...ln, elem) = 
; = 0 , if n = 0
; = count(l1, elem) + count(l2...ln, elem) , if l1 is a list
; = 1 + count(l2...ln, elem) , if l1 = elem
; = count(l2...ln, elem), otherwise


(defun myCount(l elem)
  (cond
    ((null l) 0)
    ((listp (car l)) (+ (myCount (car l) elem) (myCount (cdr l) elem)))
    ((equal (car l) elem) (+ 1 (myCount (cdr l) elem)))
    (t (myCount (cdr l) elem))
  )
)

; removeElem(l1l2...ln, elem) = 
; = nil , if n = 0
; = myAppend(list(removeElem(l1, elem)), removeElem(l2...ln, elem)), if l1 is a list
; = removeElem(l2, elem) , if l1 = elem
; = l1 U removeElem(l2, elem) , otherwise

(defun removeElem(l elem)
  (cond
    ((null l) nil)
    ((listp (car l)) (myAppend (list (removeElem (car l) elem)) (removeElem (cdr l) elem)))
    ((equal (car l) elem) (removeElem (cdr l) elem))
    (t (cons (car l) (removeElem (cdr l) elem)))
  )
)

; myPairs(l1l2...ln, r1r2...rm) = 
; = r1r2...rm, if n = 0
; = myAppend(


; -- at a superficial level
(defun myPairs (l)
  (cond
    ((null l) nil)
    (t (cons (list (car l) (myCount l (car l))) (myPairs (removeElem (cdr l) (car l)))))
  )
)

; -- in the sublists as well
; -- didn't manage to do that
