% 4.
% a. Determine the successor of a number represented as digits in a list.

% myCarry(a,b,c) = 
% = 1 , if a + b + c > 9
% = 0, otherwise

% myCarry(A:number, B:number, C:number, R:number) = 
% (i,i,i,o)

myCarry(A,B,C,1):-
    AB is A + B,
    ABC is AB + C,
    ABC > 9.
myCarry(A,B,C,0):-
    AB is A + B,
    ABC is AB + C,
    ABC =< 9.

% myDigit(a,b,c) = 
% = (a + b + c) mod 10 , if a + b + c > 9
% = a + b + c, otherwise

% myDigit(A:number, B:number, C:number, R:number) = 
% (i,i,i,o)

myDigit(A,B,C,R):-
    AB is A + B,
    ABC is AB + C,
    ABC > 9,
    R is ABC mod 10.
myDigit(A,B,C,ABC):-
    AB is A + B,
    ABC is AB + C,
	ABC =< 9.

% myAppend(l1l2...ln,e) = 
% = [e], if n = 0
% = {l1} U myAppend(l2...ln), otherwise

% myAppend(L:list, E:number, R:list)
% (i,i,o)

myAppend([],E,[E]).
myAppend([H|T],E,[H|R]):-
    myAppend(T,E,R).

% myReverse(l1l2...ln) = 
% = [], if n = 0
% = myAppend(myReverse(l2...ln),l1), otherwise

% myReverse(L:list, R:list)
% (i,o)

myReverse([],[]).
myReverse([H|T],NR):-
    myReverse(T,R),
    myAppend(R,H,NR).

% suma(l1l2...ln, p1p2...pm, c, r) = 
% = r , if c = 0 and n = 0 and m = 0
% = {c} U r , if n = 0 and m = 0 and c != 0
% = suma([],p2...pm, myCarry(0,p1,c), myDigit(0,p1,c) U r), if n = 0
% = suma(l2...ln, [], myCarry(l1,0,c), myDigit(l1,0,c) U r), if m = 0
% = suma(l2...ln, p2...pm, myCarry(l1,p1,c), myDigit(l1,p1,c) U r), otherwise

% suma(L:list, P:list, C:number, R:list, RR:list)
% (i,i,i,i,o)

suma([],[],0,[]).
suma([],[],1,[1]).
suma([],[H|T],C,[RD|R]):-
    myCarry(0,H,C,RC),
    myDigit(0,H,C,RD),
    suma([],T,RC,R).
suma([H|T],[],C,[RD|R]):-
    myCarry(H,0,C,RC),
    myDigit(H,0,C,RD),
    suma(T,[],RC,R).
suma([H1|T1],[H2|T2],C,[RD|R]):-
    myCarry(H1,H2,C,RC),
    myDigit(H1,H2,C,RD),
    suma(T1,T2,RC,R).

main(L,R,RR):-
    myReverse(L,RL),
    suma(RL,[1],0,R),
    myReverse(R,RR).

% b. For a heterogeneous list, formed from integer numbers and list of numbers, determine
%    the successor of a sublist considered as a number.

% heterList(l1l2...ln) = 
% = [], if n = 0
% = main(l1) U heterList(l2...ln), if l1 is a list
% = {l1} U heterList(l2...ln), otherwise

% heterList(L:list, R:list)
% (i,o)

heterList([],[]).
heterList([H|T],[RM|R]):-
    is_list(H),
    !,
    main(H,_,RM),
    heterList(T,R).
heterList([H|T],[H|R]):-
    heterList(T,R).
