% B. Dându-se o listă formată din numere întregi, să se genereze ȋn PROLOG lista aranjamentelor
%   cu număr par de elemente, având suma număr impar. Se vor scrie modelele matematice și modelele
%   de flux pentru predicatele folosite.

%Exemplu- pentru lista L=[2,3,4] ⇒ [[2,3],[3,2],[3,4],[4,3]] (nu neapărat în această ordine)


% insert(elem, l1l2...ln) = 
% = {elem} U l1l2...ln
% = {l1} U insert(elem, l2...ln)

% insert(E:element, L:list, R:result list)
% (i,i,o)

insert(E,L,[E|L]).
insert(E,[H|T],[H|R]):-
    insert(E,T,R).

% arr(l1l2...ln, k) = 
% = l1, if k = 1
% = arr(l2...ln, k), if k >= 1
% = insert(l1, arr(l2...ln, k - 1)), if k > 1

arr([E|_],1,[E]).
arr([_|T],K,R):-
    arr(T,K,R).
arr([H|T],K,R1):-
    K > 1,
    K1 is K - 1,
    arr(T,K1,R),
    insert(H,R,R1).

%sum(l1l2...ln) = 
% = 0 , if n = 0
% = l1 + sum(l2...ln), otherwise

% sum(L:list, R:number)
% (i,o)

sum([],0).
sum([H|T],R1):-
    sum(T,R),
    R1 is R + H.

% checkSum(L) = 
% = true, if sum(L) % 2 == 1
% = false, otherwise

% checkSum(L:list)
% (i)

checkSum(L):-
    sum(L,R),
    R mod 2 =:= 1.

% myLength(l1l2...ln) = 
% = 0, if n = 0
% = 1 + myLength(l2...ln), otherwise

% myLength(L:list, R:number)
% (i,o)

myLength([],0).
myLength([_|T],R1):-
    myLength(T,R),
    R1 is R + 1.

% oneSol(L,K,R):-
% = arr(L,K,R), if checkSum(R) = true

% oneSol(L:list, K:number, R:result list)
% (i,i,o)

oneSol(L,K,R):-
    arr(L,K,R),
    checkSum(R).

% checkEven(n)
% = n, if n % 2 = 0
% = n - 1, otherwise

% checkEven(N:number, R:number)
% (i,o)

checkEven(N,N):-
    N mod 2 =:= 0,
    !.
checkEven(N,N1):-
    N mod 2 =:= 1,
	N1 is N - 1.


% myAppend(l1l2...ln, p1p2...pm) = 
% = p1p2...pm, if n = 0
% = {l1} U myAppend(l2...ln, p1p2...pm), otherwise

% myAppend(L:list, P:list, R:list)
% (i,i,o)

myAppend([],P,P).
myAppend([H|T],P,[H|R]):-
    myAppend(T,P,R).


%finalSol(l1l2...ln, k, r, rr) =
% = r, if k = 0
% = finalSol(l1l2...ln, k - 2, myAppend(findall(RPartial,oneSol(l1l2...ln,k,RPartial),RF),r), rr), if k > 0

% finalSol(L:list, K:number, R:list, RR:list)
% (i,i,i,o)

finalSol(_,0,RR,RR):-!.
finalSol(L,K,R,RR):-
    K > 0,
    findall(RPartial,oneSol(L,K,RPartial),RF),
    K1 is K - 2,
    myAppend(RF,R,RRR),
    finalSol(L,K1,RRR,RR).

% main(l1l2...ln, r)
% = finalSol(l1l2...ln, re, [], r),  where re is checkEven(myLength(l1l2...ln))

% main(L:list, R:list)
% (i,o)

main(L,R):-
    myLength(L,RL),
    checkEven(RL,RE),
    finalSol(L,RE,[],R).