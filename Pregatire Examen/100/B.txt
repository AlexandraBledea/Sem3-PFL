% B. Să se scrie un program PROLOG care generează lista permutărilor mulţimii 1..N,
%    cu proprietatea că valoarea absolută a diferenţei între 2 valori consecutive
%    din permutare este >=2. 
%    Se vor scrie modelele matematice și modelele de flux pentru predicatele folosite.

% Exemplu- pentru N=4 ⇒ [[3,1,4,2], [2,4,1,3]] (nu neapărat în această ordine)


% createList(n,i) = 
% = [], if i = n + 1
% = {i} U createList(n, i + 1), otherwise

% createList(N:number, I:number, R:list)
% (i,i,o)

createList(N,I,[]):-
    I =:= N + 1.
createList(N,I,[I|R]):-
    I1 is I + 1,
    createList(N,I1,R).

% insert(elem, l1l2...ln) = 
% = {elem} U l1l2...ln
% = {l1} U insert(elem,l2...ln)

% insert(E:element, L:list, R:list)
% (i,i,o)

insert(E,L,[E|L]).
insert(E,[H|T],[H|R]):-
    insert(E,T,R).

% perm(l1l2...ln) = 
% = [], if n = 0
% = insert(l1,perm(l2...ln)), otherwise

% perm(L:list, R:list)
% (i,o)

perm([],[]).
perm([H|T],R1):-
    perm(T,R),
    insert(H,R,R1).

% absDiff(a,b) = 
% = a - b, if a > b
% = b - a, otherwise

% absDiff(A:number, B:number, R:number)
% (i,i,o)

absDiff(A,B,R):-
    A > B,
    !,
    R is A - B.
absDiff(A,B,R):-
    R is B - A.

% checkAbsDiff(l1l2...ln) = 
% = true, if absDiff(l1,l2) >= 2
% = checkAbsDiff(l2...ln), if absDiff(l1,l2) >= 2
% = false, otherwise

% checkAbsDiff(L:list)
% (i)

checkAbsDiff([H1,H2]):-
    absDiff(H1,H2,R),
    R >= 2.
checkAbsDiff([H1,H2|T]):-
    absDiff(H1,H2,R),
    R >= 2,
    !,
    checkAbsDiff([H2|T]).

% oneSol(L:list, R:list)
% (i,o)

oneSol(L,R):-
    perm(L,R),
    checkAbsDiff(R).

allSols(N,R):-
    createList(N,1,L),
    findall(RPartial, oneSol(L,RPartial),R).