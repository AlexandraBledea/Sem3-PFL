% B. Dându-se o listă formată din numere întregi, să se genereze lista submulţimilor cu k
%    elemente în progresie aritmetică. 
%    Se vor scrie modelele matematice și modelele de flux pentru predicatele folosite.
% Exemplu - pentru lista L=[1,5,2,9,3] şi k=3 ⇒ [[1,2,3],[1,5,9],[1,3,5]] (nu neapărat în această ordine)


% insert(elem, l1l2...ln) = 
% = {elem} U l1l2...ln
% = {l1} U insert(elem, l2...ln)

% insert(E:element, L:list, R:list)
% (i,i,o)

insert(E,L,[E|L]).
insert(E,[H|T],[H|R]):-
    insert(E,T,R).

% arr(l1l2...ln, k) = 
% = l1, if k = 1
% = arr(l2...ln, k), if k >= 1
% = insert(l1, arr(l2...ln, k-1)), if k > 1

% arr(L:list, K:number, R:list)
% (i,i,o)

arr([E|_],1,[E]).
arr([_|T],K,R):-
    arr(T,K,R).
arr([H|T],K,R1):-
    K > 1,
    K1 is K - 1,
    arr(T,K1,R),
    insert(H,R,R1).

% checkIncreasing(l1l2...ln)
% = true, if n = 2 and l1 < l2
% = checkIncreasing(l2...ln), if l1 < l2
% = false, otherwise

% checkIncreasing(L:list)
% (i)

checkIncreasing([H1,H2]):-
    H1 < H2.
checkIncreasing([H1,H2|T]):-
    H1 < H2,
    checkIncreasing([H2|T]).

% checkArithMean(l1l2...ln) = 
% = true, if n = 3 and l2 = (l1 + l3) / 2
% = checkArithMean(l2...ln), if l2 = (l1 + l3) / 2
% = false, otherwise

% checkArithMean(L:list)
% (i)

checkArithMean([H1,H2,H3]):-
    H2 =:= (H1 + H3)/2.
checkArithMean([H1,H2,H3|T]):-
    H2 =:= (H1 + H3)/2,
    checkArithMean([H2,H3|T]).
    

% oneSol(L:list, K:number, R:list)
% (i,i,o)

oneSol(L,K,R):-
    arr(L,K,R),
    checkIncreasing(R),
    checkArithMean(R).

allSols(L,K,R):-
    findall(RPartial, oneSol(L,K,RPartial),R).
    