% B. Dându-se o listă formată din numere întregi, să se genereze ȋn PROLOG lista aranjamentelor
%    cu N elemente care se termină cu o valoare impară și au suma S dată.
%    Se vor scrie modelele matematice și modelele de flux pentru predicatele folosite.

% Exemplu- pentru lista L=[2,7,4,5,3], N=2 și S=7 ⇒ [[2,5], [4,3]] (nu neapărat în această ordine)

% insert(elem, l1l2...ln) = 
% = {elem} U l1l2...ln
% = {l1} U insert(l2...ln, elem)

% insert(L:list, E: element, R: result list)
% (i,i,o)


insert(E,L,[E|L]).
insert(E,[H|T],[H|R]):-
    insert(E,T,R).


% arr(l1l2...ln, k) = 
% = l1, if k = 1
% = arr(l1l2...ln, k), if k >= 1
% = insert(l1, arr(l2...ln, k - 1)), if k > 1

% arr(L:list, K:number, R:list)
% (i,i,o)

arr([H|_],1,[H]).
arr([_|T],K,R):-
    arr(T,K,R).
arr([H|T],K,R1):-
    K > 1,
    K1 is K - 1,
    arr(T,K1,R),
    insert(H,R,R1).

% checkLastValue(l1l2...ln) =
% = true, if n = 1 and l1 % 2 == 1
% = checkLastValue(l2...ln, v), if n > 1
% = false, otherwise

% checkLastValue(L:list)
% (i)

checkLastValue([H]):-
    H mod 2 =:= 1.
checkLastValue([_|T]):-
    checkLastValue(T).


% computeSum(l1l2...ln) = 
% = 0, if n = 0
% = l1 + computeSum(l2...ln), otherwise

% computeSum(L:list, R:number)
% (i,o)

computeSum([],0).
computeSum([H|T],R1):-
    computeSum(T,R),
    R1 is R + H.

% checkSum(l1l2...ln, s) = 
% = true, if computeSum(l1l2...ln) = s
% = false, otherwise

% checkSum(L:list, S:number)
% (i,i)

checkSum(L,S):-
    computeSum(L,RS),
    RS =:= S.

% oneSol(L:list,N:number, S:number, R:list)
% (i,i,o)

oneSol(L,N,S,R):-
    arr(L,N,R),
    checkLastValue(R),
    checkSum(R,S).

allSols(L,N,S,R):-
    findall(RPartial, oneSol(L,N,S,RPartial),R).